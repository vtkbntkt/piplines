# Unique name for this workflow
name: Deploy integration branch to integration and staging/uat orgs

# Definition when the workflow should run
on:
    push:
      branches: [ development ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
  deploy-branch-to-int-and-staging-orgs:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:

    # Now Install Salesforce CLI
    - name: 'Install Salesforce CLI'
      run: |
        npm install --global @salesforce/cli 
        sf --version
        sf plugins --core

    - name: 'Installing sfdx git delta'
      run: | 
        echo y | sf plugins:install sfdx-git-delta
        sf plugins 

    # Checkout the source code
    - name: 'Checkout source code'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: 'Populate auth file with SFDX_URL secret of integration org'
      shell: bash
       # Write the private key from GitHub Secrets to a file
      run: |
        echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt


    - name: 'Create delta packages for new, modified or deleted metadata'
      run: | 
        mkdir changed-sources
        sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

    # Authenticate to org
    - name: 'Authenticate to Integration Org'
      run: sf org login sfdx-url --sfdx-url-file ./SFDX_INTEGRATION_URL.txt --alias integration ---set-default

    - name: 'Deploy the entire branch to Integration org'
      run: sf project deploy start --source-dir force-app --test-level RunLocalTests --json

    - name: 'Deploy destructive changes (if any) to Integration org'
      run: |
        if [ -d "changed-sources/destructiveChanges" ] && [ "$(ls -A changed-sources/destructiveChanges)" ]; then
          echo "Destructive changes found. Running a dry-run deployment..."
          sf deploy metadata \
            --source-dir "changed-sources/destructiveChanges" \
            --dry-run \
            --ignore-warnings \
            --target-org integration
        else
          echo "No destructive changes found. Skipping destructive deployment."
        fi 

           